"""
Script para registrar pacientes de prueba en el sistema
Ejecutar: python registrar_pacientes.py
"""

import requests
import time

SERVICE1_URL = "http://127.0.0.1:8001"

# Pacientes de prueba
pacientes = [
    {
        "cedula": "1234567890",
        "nombre": "Juan",
        "apellido": "P√©rez",
        "edad": 45
    },
    {
        "cedula": "9876543210",
        "nombre": "Mar√≠a",
        "apellido": "Gonz√°lez",
        "edad": 32
    },
    {
        "cedula": "654321987",
        "nombre": "Carlos",
        "apellido": "Rodr√≠guez",
        "edad": 58
    }
]

def registrar_pacientes():
    print("üè• Registrando pacientes de prueba...\n")
    
    for paciente in pacientes:
        try:
            # Registrar paciente
            response = requests.post(
                f"{SERVICE1_URL}/pacientes",
                params=paciente,
                timeout=5
            )
            
            if response.status_code == 200:
                print(f"‚úÖ {paciente['nombre']} {paciente['apellido']} - C√©dula: {paciente['cedula']}")
            else:
                print(f"‚ùå Error registrando {paciente['nombre']}: {response.text}")
            
            time.sleep(1)
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
    
    print("\n‚úÖ Registro completado!")


def generar_signos_vitales():
    print("\nüìä Generando signos vitales iniciales para cada paciente...\n")
    
    for paciente in pacientes:
        cedula = paciente["cedula"]
        try:
            # Generar 3 lecturas para cada paciente
            for i in range(3):
                response = requests.post(
                    f"{SERVICE1_URL}/health-data/{cedula}",
                    timeout=5
                )
                
                if response.status_code == 200:
                    data = response.json()
                    lectura = data.get("lectura", {})
                    print(f"  ‚úÖ Lectura {i+1} para {paciente['nombre']}: "
                          f"BPM={lectura.get('ritmo_cardiaco')}, "
                          f"Temp={lectura.get('temperatura')}¬∞C")
                else:
                    print(f"  ‚ùå Error generando datos para {paciente['nombre']}")
                
                time.sleep(2)  # Esperar 2 segundos entre lecturas
            
            print()
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
    
    print("‚úÖ Signos vitales generados!")


if __name__ == "__main__":
    print("=" * 60)
    print("  CONFIGURACI√ìN INICIAL DEL SISTEMA DE MONITOREO")
    print("=" * 60)
    print()
    
    # Verificar que el servicio est√© activo
    try:
        response = requests.get(f"{SERVICE1_URL}/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Service1 est√° activo\n")
        else:
            print("‚ö†Ô∏è Service1 respondi√≥ con un c√≥digo inusual\n")
    except Exception as e:
        print(f"‚ùå Error: No se puede conectar con Service1 en {SERVICE1_URL}")
        print("   Aseg√∫rate de que el servicio est√© corriendo.\n")
        exit(1)
    
    # Paso 1: Registrar pacientes
    registrar_pacientes()
    
    # Paso 2: Generar signos vitales
    generar_signos_vitales()
    
    print("\n" + "=" * 60)
    print("  CONFIGURACI√ìN COMPLETADA")
    print("=" * 60)
    print("\nüì± Ahora puedes usar el bot de Telegram con estas c√©dulas:")
    for p in pacientes:
        print(f"   ‚Ä¢ {p['cedula']} - {p['nombre']} {p['apellido']}")
    print()